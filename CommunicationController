package com.jpmc.cwoc.controllers.cwoc.communication;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jpmc.cwoc.controllers.cwoc.onboarding.OnboardingOperationsController;
import com.jpmc.cwoc.cwoc.communication.CommunicationService;
import com.jpmc.cwoc.cwoc.communication.CommunicationVO;
import com.jpmc.cwoc.cwoc.contract.ContractMasterVO;
import com.jpmc.cwoc.exception.CwocInvalidResponseException;
import io.swagger.annotations.ApiOperation;
import org.hibernate.type.BlobType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotBlank;
import java.io.ByteArrayInputStream;
import java.nio.file.Path;
import java.util.List;
@RestController
@RequestMapping("/communication")
@CrossOrigin
public class CommunicationController {
    private static final Logger LOGGER = LoggerFactory.getLogger(CommunicationController.class);


    @Autowired
    CommunicationService communicationService;
    @ApiOperation(value = "get Communication List ")
    @GetMapping(value = "/getCommunicationList")
    public List<CommunicationVO> getCommunicationList( String assignmentId) {

        try {
            return communicationService.getCommunicationList(assignmentId);
        } catch (Exception ex) {
            LOGGER.error("An error occurred while executing getCommunicationList  request {} " + ex.getMessage());
            throw new CwocInvalidResponseException("An error occurred while processing the request");
        }
    }
    @ApiOperation(value = "get Communication ")
    @GetMapping(value = "/getCommunication")
    public CommunicationVO getCommunication( int communicationId) {

        try {
            return communicationService.getCommunication(communicationId);
        } catch (Exception ex) {
            LOGGER.error("An error occurred while executing getCommunicationList  request {} " + ex.getMessage());
            throw new CwocInvalidResponseException("An error occurred while processing the request");
        }
    }

    @ApiOperation(value = "save Communication ")
    @RequestMapping(value = "/saveCommunication", method = RequestMethod.POST,consumes = {"multipart/form-data"})
    public @ResponseBody
      boolean saveCommunication(@RequestPart ("uploadfile") MultipartFile file, @RequestPart("info")String communicationVO,HttpServletResponse response) {
        response.setHeader("Content-Type","multipart/form-data,application/json");
        try {
            CommunicationVO jsonAd = new ObjectMapper().readValue(communicationVO, CommunicationVO.class);
            return communicationService.saveCommunication(file,jsonAd);
        } catch (Exception ex) {
            LOGGER.error("An error occurred while executing  saveCommunication request {} " + ex.getMessage());
            throw new CwocInvalidResponseException("An error occurred while processing the request");
        }

    }
    @ApiOperation(value = "Delete Communication ")
    @PostMapping(value = "/deleteCommunication")
    public boolean deleteCommunication( @RequestBody int communicationId) {
        boolean flag;
        try {
           flag=communicationService.deleteCommunication(communicationId);
        } catch (Exception ex) {
            LOGGER.error("An error occurred while executing  deleteCommunication request {} " + ex.getMessage());
            throw new CwocInvalidResponseException("An error occurred while processing the request");
        }
return flag;
    }

    @ApiOperation(value = "download Attachment")
    @GetMapping(value = "/downloadAttachment/{communicationId}")
    public InputStreamResource downloadAttachment(@PathVariable int communicationId,HttpServletResponse response){
        ByteArrayInputStream attachment ;
        response.setHeader("Content-Disposition", "attachment;");
        response.setHeader("Content-Type", "application/pdf,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet," +
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document,text/*,text/html charset=utf-8,image/png,image/jpeg,image/gif,image/bmp,image/tiff,text/plain,image/pict,text/xml");

        try {
             attachment = communicationService.downloadAttachment(communicationId);

        } catch (Exception ex) {
            LOGGER.error("An error occurred while executing  saveCommunication request {} " + ex.getMessage());
            throw new CwocInvalidResponseException("An error occurred while processing the request");
        }
         return new InputStreamResource(attachment);
    }


}
